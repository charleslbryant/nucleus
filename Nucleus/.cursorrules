# Rules

## Workflow
1. **Session Start (trigger: "let's go"):**
   - Review the memory bank (projectbrief.md, activeContext.md, progress.md, systemPatterns.md, techContext.md, productContext.md).
   - Review GitHub Issues: Check current PRDs (#100-#103), CRDs (#121-#124), and personal tasks (#125-#128).
   - **Personal Task Log Protocol**: Check if today's task log exists in `docs/tasks/personal/{username}/tasklog-YYYY-MM-DD.md`.
     - If no task log for today exists, create a new one using the template.
     - Move all incomplete tasks (In Progress, On Hold, To Do) from the previous task log to today's task log.
     - Keep completed tasks in the previous log's "Done" section.
     - Always link personal tasks to GitHub Issues using `#issue-number`.
   - **Branch Creation Protocol**: When starting work on a task:
     - Check GitHub Issues for the task number
     - Create feature branch: `feature/issue-{number}-{description}`
     - Example: `feature/issue-123-production-deployment`
     - Example: `feature/issue-124-authentication-system`
     - Link branch to GitHub Issue in commits and PRs
   - Determine the next task with the operator.
   - Create a plan in chat.
2. **Execution:**
   - Work with the operator to execute the plan, updating personal task log and GitHub Issues as needed.
3. **Recap Protocol (trigger: "recap"):**
   - **Review Memory Bank**: Read all memory bank files (projectbrief.md, activeContext.md, progress.md, systemPatterns.md, techContext.md, productContext.md) to understand current state
   - **Git Status**: Run `git status` to see all changes made during the session
   - **Write Recap Summary**: Create a comprehensive summary of what was accomplished, including:
     - Features implemented
     - Technical challenges solved
     - Architecture decisions made
     - Current system status
     - Next steps identified
   - **Update Personal Task Log**: Move completed tasks to "Done" section, update status of in-progress tasks
   - **Update GitHub Issues**: 
     - Update CRD issues with completed implementation details
     - Update PRD issues with any requirement changes or clarifications
     - Close completed issues or update status
     - Add comments to issues with progress updates
   - **Write ADRs**: Create Architecture Decision Records (ADRs) for any significant technical decisions made:
     - Use template from `docs/adr/ADR-template.md`
     - Document the decision, context, consequences, and alternatives considered
     - Store in `docs/adr/` with sequential numbering
   - **Update Memory Bank**: 
     - Update activeContext.md with current focus and recent changes
     - Update progress.md with completed work and current status
     - Update systemPatterns.md if new patterns emerged
     - Update techContext.md if technology choices changed
   - **Git Operations**:
     - Run `git add .` to stage all changes
     - Write descriptive commit message following conventional commits format
     - Run `git commit -m "commit message"`
   - **Remote Operations**:
     - If remote exists, run `git pull` to sync with remote changes first
     - Resolve any merge conflicts if they occur
     - Run `git push origin {current-branch}` (use current feature branch)
     - Create pull request with detailed description of changes
     - Link related GitHub Issues in PR description using `#issue-number`
     - Include branch name in PR title: `[issue-{number}] {description}`

## Memory Bank
- Always read memory bank files at start of each session
- Update documentation after significant changes
- Use memory bank for context and decision tracking

## Product Management Process

### Artifacts
- **PRDs (Product Requirement Documents):** GitHub Issues with `prd` label defining feature requirements, user problems, jobs-to-be-done, and user journeys. One PRD per feature, stored as GitHub Issues (#100-#103).
- **Roadmap:** GitHub Issues organized by labels (`phase-1`, `phase-2`, `phase-3`, `phase-4`) and milestones for sprint planning.
- **CRDs (Change Request Documents):** GitHub Issues with `crd` and `epic` labels breaking down "Now" PRDs into actionable tasks. One CRD per active PRD, stored as GitHub Issues (#121-#124).
- **Personal Task Logs:** Daily logs of individual work, grouped by status (in progress, on hold, to do, done, cancelled), stored in `docs/tasks/personal/{username}/`.
- **Team Task Logs:** Sprint summaries and team coordination in `docs/tasks/team/`.
- **ADRs (Architecture Decision Records):** Document significant technical decisions with context, consequences, and alternatives. Stored in `docs/adr/` with sequential numbering.

### Principles
- All requirements and tasks are traceable through GitHub Issues hierarchy: PRD → CRD → Personal Task.
- Only PRDs in the "Now" bucket (current phase) get CRDs and active tasks.
- All changes are documented and linked for full traceability.
- Personal tasklogs are namespaced by username to prevent conflicts.
- GitHub Issues provide team collaboration, automation, and integration.
- The .cursorrules file is updated as the process evolves. 

## Architecture Patterns
- **Clean Architecture**: Dependencies point inward toward Domain layer (see [architecture.md](docs/architecture.md))
- **Strategy Pattern**: Different evaluator types (LLM, human, rule)
- **Repository Pattern**: Data access abstraction for PostgreSQL
- **Dependency Injection**: Loose coupling between layers

## Technology Stack
- ASP.NET Core with Entity Framework Core
- PostgreSQL with JSONB for flexible data storage
- OpenAI GPT API for LLM evaluation
- JWT authentication (for dashboard access)
- FluentValidation and AutoMapper
- Vue.js 3 with Tailwind CSS for admin dashboard
- Pinia for state management
- Chart.js for data visualization

## Database Schema
- **workflow_run**: Tracks workflow executions with external IDs
- **model_run**: Records AI model executions with input/output data
- **evaluation**: Stores evaluation results with scores and feedback

## Development Guidelines
- Always maintain layer separation (Domain → Application → Interface/Infrastructure)
- Use UUID primary keys with external reference fields
- Implement proper validation for API inputs
- Handle OpenAI API rate limits and errors
- Use JSONB for flexible payload storage
- Follow the single endpoint design pattern
- Use Vite proxy for frontend-backend communication in development
- Disable HTTPS redirect in development environment

## Source (src) File Organization
- **Domain**: Core entities (workflow_run, model_run, evaluation)
- **Application**: Evaluation use cases, LLM integration, orchestration
- **Interface**: `/api/evaluate` controller, DTOs, validation
- **Infrastructure**: PostgreSQL context, OpenAI API integration
- **Presentation**: Vue.js admin dashboard with API integration

## Common Patterns
- Use strategy pattern for different evaluator types
- Implement repository interfaces in Domain layer
- Use DTOs for API communication with external platforms
- Apply validation at Interface layer with FluentValidation
- Use AutoMapper for object mapping between layers
- Use primary constructor in C# classes when possible
- Use Pinia stores for frontend state management
- Implement responsive design with Tailwind CSS

## Testing Strategy
- Unit tests for Domain and Application layers
- Integration tests for Infrastructure layer (database, OpenAI API)
- .http API tests for endpoint
- Mock external dependencies (OpenAI API, workflow platforms)
- Frontend component testing with Vue Test Utils

# Database Connection String Rule
- Never write database connection strings to appsettings.json or appsettings.Development.json.
- Always keep connection strings in a .env file.
- Copy \.env.example to any project that needs a connection string.

# Terminal Command Rules
- NEVER use && in terminal commands due to shell compatibility issues
- Use separate commands or semicolons (;) instead of &&
- Always run commands one at a time to avoid shell parsing issues
- Use proper directory navigation with cd commands separately
- ALWAYS get current date and time from terminal using `date` command before writing dates or times to files or documentation
- Never assume or guess dates - always verify with terminal first