// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Nucleus.Infrastructure.Data;

#nullable disable

namespace Nucleus.Infrastructure.Migrations
{
    [DbContext(typeof(NucleusDbContext))]
    [Migration("20250705165152_AddUserAndTenantEntities")]
    partial class AddUserAndTenantEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nucleus.Domain.Entities.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EvaluatorType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("evaluator_type");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<Guid>("ModelRunId")
                        .HasColumnType("uuid")
                        .HasColumnName("model_run_id");

                    b.Property<bool>("Pass")
                        .HasColumnType("boolean")
                        .HasColumnName("pass");

                    b.Property<decimal>("Score")
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("score");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EvaluatorType");

                    b.HasIndex("ModelRunId");

                    b.HasIndex("Pass");

                    b.HasIndex("Score");

                    b.ToTable("evaluation", (string)null);
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.EvaluationCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CriteriaDefinition")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("criteria_definition");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer")
                        .HasColumnName("task_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsDefault");

                    b.HasIndex("TaskType");

                    b.HasIndex("Name", "Version")
                        .IsUnique();

                    b.ToTable("evaluation_criteria", (string)null);
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.ModelRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ExternalNodeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_node_id");

                    b.Property<string>("InputData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("input_data");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<string>("ModelProvider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_provider");

                    b.Property<string>("OutputData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("output_data");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<string>("PromptVersion")
                        .HasColumnType("text")
                        .HasColumnName("prompt_version");

                    b.Property<int>("Task")
                        .HasColumnType("integer")
                        .HasColumnName("task");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WorkflowRunId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_run_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ModelName");

                    b.HasIndex("Platform");

                    b.HasIndex("Task");

                    b.HasIndex("WorkflowRunId");

                    b.ToTable("model_run", (string)null);
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Subdomain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subdomain");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("subscription_expires_at");

                    b.Property<string>("SubscriptionPlan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subscription_plan");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Subdomain")
                        .IsUnique();

                    b.HasIndex("SubscriptionPlan");

                    b.ToTable("tenant", (string)null);
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Role");

                    b.HasIndex("TenantId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.WorkflowRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<string>("ExternalExecutionId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_execution_id");

                    b.Property<string>("ExternalWorkflowId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_workflow_id");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mode");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<string>("SessionId")
                        .HasColumnType("text")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.Property<string>("TriggeredBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("triggered_by");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WorkflowName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("workflow_name");

                    b.HasKey("Id");

                    b.HasIndex("Platform");

                    b.HasIndex("SessionId");

                    b.HasIndex("StartedAt");

                    b.HasIndex("ExternalExecutionId", "Platform")
                        .IsUnique();

                    b.ToTable("workflow_run", (string)null);
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.Evaluation", b =>
                {
                    b.HasOne("Nucleus.Domain.Entities.ModelRun", "ModelRun")
                        .WithMany("Evaluations")
                        .HasForeignKey("ModelRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelRun");
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.ModelRun", b =>
                {
                    b.HasOne("Nucleus.Domain.Entities.WorkflowRun", "WorkflowRun")
                        .WithMany("ModelRuns")
                        .HasForeignKey("WorkflowRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowRun");
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.User", b =>
                {
                    b.HasOne("Nucleus.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.ModelRun", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Nucleus.Domain.Entities.WorkflowRun", b =>
                {
                    b.Navigation("ModelRuns");
                });
#pragma warning restore 612, 618
        }
    }
}
